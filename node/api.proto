syntax = "proto3";
package API;

// should be represented as u8
enum AccountType {
  Managed = 0;
  Autonomous = 1;
}

message Account {
  AccountType type = 1;
  bytes address = 2;
  bytes publicKey = 3;
  bytes privateKey = 4;
  uint32 votingPower = 5;
}

// should be represented as u8
enum SigType { Ed25519 = 0; }

// should be represented as u8
enum BlockVersion { V1 = 0; }

message Transaction {
  // Initialize a new Account
  message TxOpen { AccountType type = 1; };

  // Block send is a send transaction in the sender's account
  message TxSend {
    bytes receiver = 1;
    uint64 amount = 2;
    bytes data = 3;
  };

  // Block Claim collects a transaction from another account's block
  message TxClaim { bytes transactionID = 1; };

  // Block delegate assigns a new representative to an account
  message TxDelegate { bytes representative = 1; };

  oneof data {
    TxOpen txOpen = 5;
    TxSend txSend = 6;
    TxClaim txCollect = 7;
    TxDelegate txDelegate = 8;
  };
}

message Block {
  // 64 bytes (for Ed25519, might be expanded later)
  bytes signature = 4;

  // 32 bytes (for Ed25519)
  // account's public key
  // this needs to be provided since account addresses are hashed public keys
  bytes publicKey = 5;

  // seconds of UTC time since Unix epoch
  // will be set by the first node receiving the transaction
  uint64 timestamp = 7;

  // data is the field that will be signed and hashed to generate the values
  // above
  BlockData data = 6;
  message BlockData {
    BlockVersion version = 1;
    SigType signatureType = 2;

    // the new account balance after applying all transactions
    uint64 balance = 4;

    // the block height (block index)
    uint64 height = 5;

    // previous block, empty if first block
    optional bytes previous = 6;

    repeated Transaction transactions = 7;
  }
}

// Calls for a vote on conflicting blocks (e.g when double spending)
message CallVoteRequest {}

// Vote casts a vote on which of multiple conflicting block will be chosen
message VoteResponse {}
