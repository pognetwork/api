syntax = "proto3";
package API;

message Empty {}

// should be represented as u8
enum AccountType {
  Managed = 0;
  Autonomous = 1;
}

// should be represented as u8
enum SigType { Ed25519 = 0; }

// should be represented as u8
enum BlockVersion { V1 = 0; }

message Transaction {
  // Initialize a new Account
  message TxOpen { AccountType type = 1; };

  // Block send is a send transaction in the sender's account
  message TxSend {
    bytes receiver = 1;
    uint64 amount = 2;
    bytes data = 3;
  };

  // Block Claim collects a transaction from another account's block
  message TxClaim { bytes sendTransactionID = 1; };

  // Block delegate assigns a new representative to an account
  message TxDelegate { bytes representative = 1; };

  oneof data {
    TxOpen txOpen = 5;
    TxSend txSend = 6;
    TxClaim txClaim = 7;
    TxDelegate txDelegate = 8;
  };
}

// Block is a struct with both header, data and raw data
// It should be used for things like api responses when querying blocks
message Block {
  API.BlockHeader header = 1;
  API.BlockData data = 2;
  bytes block_id = 3;
}

// A minimal version of Block
// Should be used in cases where blocks need to be verified like in p2p
// communication or when re-building/verifieng the entire chain
message RawBlock {
  BlockHeader header = 1;
  bytes data = 2;
}

message BlockHeader {
  // 64 bytes (for Ed25519, might be expanded later)
  bytes signature = 1;

  // 32 bytes (for Ed25519)
  // account's public key
  // this needs to be provided since account addresses are hashed public keys
  bytes publicKey = 5;

  // seconds of UTC time since Unix epoch
  // will be set by the first node receiving the transaction
  uint64 timestamp = 7;
}

message BlockData {
  BlockVersion version = 1;
  SigType signatureType = 2;

  // the new account balance after applying all transactions
  uint64 balance = 4;

  // the block height (block index)
  uint64 height = 5;

  // previous block, empty if first block
  bytes previous = 6;

  // transactions contained in a block
  // - Can't contain duplicates
  // - Can't contain more than 255 transactions
  // - Orderd (as per protobuf specification)
  repeated Transaction transactions = 7;
}
