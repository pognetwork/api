syntax = "proto3";
package P2P;

import "node/api.proto";

message ResponseHeader {

  // 64 bytes (for Ed25519, might be expanded later)
  bytes signature = 1;
  // 32 bytes (for Ed25519)
  // node's public key
  // this needs to be provided since account addresses are hashed public keys
  bytes publicKey = 5;
}

message Peer { bytes ip = 1; }

enum Failure { MalformedRequest = 0; }

message ResponseData {
  message Success {}
  message Failure { Failure failure = 1; }

  message Pong { repeated Peer peers = 1; }

  // seconds of UTC time since Unix epoch
  uint64 timestamp = 2;

  oneof data {
    Success success = 3;
    Failure failure = 4;
    Pong pong = 5;
  }
}

message RequestHeader {
  // 64 bytes (for Ed25519, might be expanded later)
  bytes signature = 1;

  // 32 bytes (for Ed25519)
  // node's public key
  // this needs to be provided since account addresses are hashed public keys
  bytes publicKey = 5;
}

message RequestData {
  message Forward {
    RequestHeader requestHeader = 1;
    RequestData request = 2;
  }

  message VoteProposal { API.RawBlock block = 1; }
  message FinalVote { API.RawBlock block = 1; }

  message Ping {
    // 10 peers for network discovery
    repeated bytes peers = 1;
  }

  API.SigType signatureType = 1;

  // seconds of UTC time since Unix epoch
  uint64 timestamp = 2;

  oneof data {
    Ping ping = 4;
    Forward forward = 5;
    VoteProposal vote = 6;
    FinalVote finalVote = 7;
  }
}
