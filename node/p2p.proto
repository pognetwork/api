syntax = "proto3";
package P2P;

import "node/api.proto";

message ResponseHeader {
  // 64 bytes (for Ed25519, might be expanded later)
  bytes signature = 1;

  // 32 bytes (for Ed25519)
  // node's public key
  // this needs to be provided since account addresses are hashed public keys
  bytes publicKey = 5;
}

message Peer { 
  bytes publicKey = 1; 
  uint64 votingPower = 2;
  bytes ip = 3;
  Duration lastPing = 4;
}

enum Failure {
  MalformedRequest = 0;
  InvalidSignature = 1;
  InternalError = 2;
}

message ResponseBody {
  message Success {}
  message Pong { repeated Peer peers = 1; }

  API.SigType signatureType = 1;

  // seconds of UTC time since Unix epoch
  uint64 timestamp = 2;
  oneof data {
    Success success = 3;
    Failure failure = 4;
    Pong pong = 5;
  }
}

message RequestHeader {
  // 64 bytes (for Ed25519, might be expanded later)
  bytes signature = 1;

  // 32 bytes (for Ed25519)
  // node's public key
  // this needs to be provided since account addresses are hashed public keys
  bytes publicKey = 5;
}

message RequestBody {
  message Forward {
    RequestHeader requestHeader = 1;
    RequestBody request = 2;
  }
  message VoteProposal { API.RawBlock block = 1; }
  message FinalVote { API.RawBlock block = 1; }
  message Ping { repeated Peer peers = 1; }

  API.SigType signatureType = 1;

  // seconds of UTC time since Unix epoch
  uint64 timestamp = 2;
  oneof data {
    Ping ping = 4;
    Forward forward = 5;
    VoteProposal voteProposal = 6;
    FinalVote finalVote = 7;
  }
}
