syntax = "proto3";
package RPC;

import "node/api.proto";

service Account {
  // GetBalance accepts BalanceRequests and returns BalanceReplies
  rpc GetBalance(BalanceRequest) returns (BalanceReply);
  // GetNextBlockHeight uses an address to get the latest block index to then
  // return the next index
  rpc GetBlockHeight(BlockHeightRequest) returns (BlockHeightReply);
  // GetVotingPower uses an address to get the voting power of an account
  rpc GetVotingPower(VotingPowerRequest) returns (VotingPowerReply);
  // GetBlockByID uses the hash of a block to get the data
  rpc GetBlockByID(BlockByIDRequest) returns (BlockByIDReply);
  // GetDelegate uses an account address to return a address of the delegate
  rpc GetDelegate(DelegateRequest) returns (DelegateReply);
  // GetPendingBlocks gets all blocks that havent been processed
  rpc GetPendingBlocks(Empty) returns (PendingBlockReply);
  // GetUnacknowledgedTX gets a number of how many transactions are unacknowledged
  rpc GetUnacknowledgedTX(Empty) returns (UnacknowledgedTXReply);
  // GetTXByID uses a transaction ID to get a transaction
  rpc GetTXByID(TXByIDRequest) returns (TXByIDReply);
  // GetTXByIndex uses an index for inside a block to return a transaction
  rpc GetTXByIndex(TXByIndexRequest) returns (TXByIndexReply);
}

message BalanceRequest {
  // Balance Request takes the address for query
  bytes address = 1;
}

message BalanceReply {
  // Reply contains the balance queried
  uint64 balance = 1;
}

message BlockHeightRequest {
  bytes address = 1;
  optional bool getNext = 2;
}

message BlockHeightReply { uint64 nextHeight = 1; }

message VotingPowerRequest { 
  bytes address = 1; 
  optional bool getActive = 2;
}

message VotingPowerReply { uint32 power = 1; }

message BlockByIDRequest { bytes hash = 1; }

message BlockByIDReply { API.Block block = 1; }

message DelegateRequest { bytes address = 1; }

message DelegateReply { bytes delegateAddress = 1; }

message PendingBlockReply { repeated API.Block blocks = 1; }

message UnacknowledgedTXReply {repeated API.Transaction transactions = 1; }

message TXByIDRequest { bytes transactionID = 1; }

message TXByIDReply { API.Transaction transaction = 1; }

message TXByIndexRequest { 
  uint64 height = 1;
  uint64 index = 2; 
}

message TXByIndexReply { API.Transaction transaction = 1; }

message Empty {}
