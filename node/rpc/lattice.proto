syntax = "proto3";
package LATTICE;

import "node/api.proto";

service Lattice {
  // GetBalance accepts BalanceRequests and returns BalanceReplies
  rpc GetBalance(BalanceRequest) returns (BalanceReply);
  rpc GetLatestBlock(LatestBlockRequest) returns (LatestBlockReply);
  // GetVotingPower uses an address to get the voting power of an account
  rpc GetVotingPower(VotingPowerRequest) returns (VotingPowerReply);
  // GetBlockByID uses the hash of a block to get the data
  rpc GetBlockByID(BlockByIDRequest) returns (BlockByIDReply);
  // GetDelegate uses an account address to return a address of the delegate
  rpc GetDelegate(DelegateRequest) returns (DelegateReply);
  // GetPendingBlocks gets all blocks that havent been processed
  rpc GetPendingBlocks(Empty) returns (PendingBlockReply);
  rpc GetUnclaimedTransactions(GetUnclaimedTransactionsRequest)
      returns (GetUnclaimedTransactionsReply);
  rpc GetBlocks(GetBlocksRequest) returns (GetBlocksReply);
  // GetUnacknowledgedTX gets a number of how many transactions are
  // unacknowledged
  rpc GetUnacknowledgedTX(Empty) returns (UnacknowledgedTXReply);
  // GetTXByID uses a transaction ID to get a transaction
  rpc GetTXByID(TXByIDRequest) returns (TXByIDReply);
  // GetTXByIndex uses an index for inside a block to return a transaction
  rpc GetTXByIndex(TXByIndexRequest) returns (TXByIndexReply);
  // GetBlockSpamIndex
  rpc GetBlockSpamIndex(API.RawBlock) returns (BlockSpamIndexReply);
  // SubmitBlock
  rpc SubmitBlock(API.RawBlock) returns (Empty);
}

enum sortBy {
  data = 0;
  data_desc = 1;
}

message GetUnclaimedTransactionsRequest { bytes address = 1; }
message GetUnclaimedTransactionsReply { repeated Tx data = 1; }

message Tx {
  API.Transaction transaction = 1;
  bytes transaction_id = 2;
}

message BlockSpamIndexReply { float value = 1; }

message GetBlocksRequest {
  uint32 limit = 1;
  uint32 offset = 2;
  sortBy sortBy = 3;
  optional bytes address = 4; // optional, get only blocks by a specific account
}

message GetBlocksReply { repeated API.Block blocks = 1; }

message BalanceRequest {
  // Balance Request takes the address for query
  bytes address = 1;
}

message BalanceReply {
  // Reply contains the balance queried
  uint64 balance = 1;
}

message LatestBlockRequest { bytes address = 1; }
message LatestBlockReply { API.Block block = 1; }

message VotingPowerRequest {
  bytes address = 1;
  bool getActive = 2;
}

message VotingPowerReply { uint64 power = 1; }

message BlockByIDRequest { bytes hash = 1; }

message BlockByIDReply { API.Block block = 1; }

message DelegateRequest { bytes address = 1; }

message DelegateReply { bytes delegateAddress = 1; }

message PendingBlockReply { repeated API.Block blocks = 1; }

message UnacknowledgedTXReply { repeated API.Transaction transactions = 1; }

message TXByIDRequest { bytes transactionID = 1; }

message TXByIDReply {
  API.Transaction transaction = 1;
  bytes block = 2;
  bytes address = 3;
}

message TXByIndexRequest {
  uint64 height = 1;
  uint64 index = 2;
}

message TXByIndexReply {
  API.Transaction transaction = 1;
  bytes block = 2;
  bytes address = 3;
}

message Empty {}
